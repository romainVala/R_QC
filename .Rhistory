require(ggplot2)
source(file.path(Sys.getenv("HOME"),'dvpt/R/init_path.R'))
#compare mriqc
resdir='/network/lustre/iss01/cenir/analyse/irm/users/romain.valabregue/dicom/res'
mriqco = read.csv(file.path(resdir,'res_mriqcold_17237.csv'))
mriqcn = read.csv(file.path(resdir,'res_mriqcnew_17237.csv'))
mriqcs = read.csv(file.path(resdir,'res_mriqcsingu_17237.csv'))
mqc = read.csv(file.path(resdir,'res_mriqc_18999.csv'))
View(mqc)
mqc = read.csv(file.path(resdir,'res_mriqc_18999.csv'))
[fvoln novoln] = gfile(dcat,'volume_noise.csv',pp);
fmask='/scratch/CENIR/users/romain.valabregue/dicom/nifti_proc/PRISMA_COGIT/2017_05_03_COGIT_047/anat_S03_t1_mp2rage_sag_p3_1mm_iso_INV2/spm12/ms_S03_t1_mp2rage_sag_p3_1mm_iso.nii'
fname=fmask
fmask='/scratch/CENIR/users/romain.valabregue/dicom/nifti_proc/PRISMA_COGIT/2017_05_03_COGIT_047/anat_S03_t1_mp2rage_sag_p3_1mm_iso_INV2/cat12/niw_Mean_brain_mask5k.nii.gz'
library(oro.nifti)
library(pastecs)
multi_fit = TRUE
mask=TRUE
basefn=strsplit( basename(fname) , "\\.")[[1]][1]
img <- readNIfTI(fname,reorient = FALSE)
xn <- as.vector(img) #img_3d = drop_img_dim(img)
mimg <- readNIfTI(fmask,reorient = FALSE)
xma <- as.vector(mimg)
xn[xma<=0.5]=NaN
if (mask){
xn[xn<=1]=NaN
xn = na.omit(xn) #x[!is.na(x)]
}
doR <- density(xn, na.rm = TRUE,kernel="cosine",n=512,bw=4)
x <- unlist(doR[1])
y <- unlist(doR[2])
Vol_tot = length(xn)
res=data.frame(Vol_tot)
res$Vol_img = length(length(img))
res$pix_vol = abs(prod(pixdim(img)[1:3]))
ysw=smooth.spline(x,y,spar=0.5,keep.data = FALSE)
tp<-turnpoints(ysw$y)
if (tp$firstispeak) res$first_is_peak = 1 else res$first_is_peak = 0
ymax=max(y)
xmax = x[y==ymax][1]
yp=y[tp$peaks]
ym = max(yp[y[tp$peaks]<ymax & x[tp$peaks]>xmax])
res$x_nois_end = x[y<=ym & x>xmax][1]
res$all_nb_peak_all =  length(yp)
res$all_nb_peak_data =  length(yp[ x[tp$peaks]<=xmax])
maxi<-range(xn)[2]
h=hist(xn,breaks=maxi,plot=FALSE)
mm=max(h$counts[-1])
res$x_nois_max <- h$breaks[h$counts==mm][1]
res$x_extrem_hist10 <- min(h$breaks[(h$counts<10) & (h$breaks[-1]>res$x_nois_max)])
png(filename = paste0('histo_',basefn,'_all.png'),antialias = c('subpixel'),
width = 800, height = 800,)
plot(doR)
lines(ysw$x,ysw$y,col=2,lty = 'dotdash')
points(x[tp$peaks],y[tp$peaks],col="red")
points(x[tp$pits],y[tp$pits],col="green")
if (!is.na(res$x_nois_end)){
points(res$x_nois_end,y[x==res$x_nois_end],col="blue",pch=22)
points(res$x_extrem_hist10,y[x==res$x_nois_end],col="red",pch=22)
} else {
points(res$x_extrem_hist10,0,col="red",pch=22)
}
dev.off()
if (tp$nturns%%2==1) {
if ( length(which(tp$pits)) > length(which(tp$peaks))) {
print('ARGG should not happend more pits !')
tp$pits[tail(which(tp$pits),1)] = FALSE #remove the last pits
} else {
#tp$peaks[tail(which(tp$peaks),1)] = FALSE #remove the last peaks
#make first points a pits
tp$pits[1] = TRUE
}
} else {
#for only 7 suj
if (tp$firstispeak) {
tp$pits[1] = TRUE ; tp$pits[tail(which(tp$pits),1)] = FALSE #remove the last pits
}
}
if ( length(which(tp$pits)) != length(which(tp$peaks))) print('ARGG still different length')
diffrel = (y[tp$pos[tp$peaks]]-y[tp$pos[tp$pits]])/max(y[tp$pos[tp$peaks]])
length(which(tp$pits)
)
length(which(tp$peaks))
diffrel = (y[tp$pos[tp$peaks]]-y[tp$pos[tp$pits]])/max(y[tp$pos[tp$peaks]])
filtre_diff = diffrel>0.01
res$x_extrem2 <- min(x[tp$pos[tp$pits]][filtre_diff==FALSE],na.rm = TRUE)
mmax = x[y == max(y[tp$pos[tp$peaks]],na.rm = TRUE)]
res$xpos_max = mmax
res$x_extrem3 <- min(x[tp$pos[tp$pits]][ filtre_diff==FALSE & x[tp$pos[tp$pits]] >mmax ],na.rm = TRUE)
res$data_nb_peak_inf = length(which(x[tp$pos[tp$peaks]]<= res$xpos_max))
np = length(diffrel[filtre_diff])
res$data_nb_peak <- np
res$data_nb_turn =  tp$nturns
res$data_nb_peak_all =  length(diffrel)
if (np>0) {
peak_higth <- diffrel[filtre_diff]
peak_pos <- x[tp$pos[tp$peaks]][filtre_diff]
peak_den <- y[tp$pos[tp$peaks]][filtre_diff]
pits_pos <- x[tp$pos[tp$pits]][filtre_diff]
pits_den <- y[tp$pos[tp$pits]][filtre_diff]
for (k in 1:np){
fn=sprintf('x_data_P%s_higth',k)
d= data.frame(peak_higth[k])
colnames(d)=fn
res = merge(res,d) #cbind est plus rapide ?
}
for (k in 1:np){
fn=sprintf('x_data_P%s_pos',k)
d= data.frame(peak_pos[k])
colnames(d)=fn
res = merge(res,d)
}
for (k in 1:np){
fn=sprintf('x_data_Min%s_pos',k)
d= data.frame(pits_pos[k])
colnames(d)=fn
res = merge(res,d)
}
for (k in 1:np){
fn=sprintf('x_data_P%s_den',k)
d= data.frame(peak_den[k])
colnames(d)=fn
res = merge(res,d)
}
for (k in 1:np){
fn=sprintf('x_data_Min%s_den',k)
d= data.frame(pits_den[k])
colnames(d)=fn
res = merge(res,d)
}
if (multi_fit & (res$data_nb_peak==3 | res$data_nb_peak==4| res$data_nb_peak==2) ){
require(mixtools)
if (res$data_nb_peak==4) {
mvall = c(res$x_data_P1_pos,(res$x_data_P1_pos+res$x_data_P3_pos)/2,res$x_data_P3_pos,res$x_data_P4_pos)
}
if (res$data_nb_peak==3) {
mvall = c(res$x_data_P1_pos,(res$x_data_P1_pos+res$x_data_P2_pos)/2,res$x_data_P2_pos,res$x_data_P3_pos)
}
if (res$data_nb_peak==2) {
mvall = c((res$x_data_P1_pos+res$x_data_P2_pos)/2,res$x_data_P1_pos,res$x_data_P2_pos)
}
ptm <- proc.time()
if (res$data_nb_peak==2) {
mvcons = mvall
mvcons[1] = NA
resf <- normalmixEM(xn, lambda = .25, mu = mvall, sigma = c(100,50,20),mean.constr = mvcons)}
else {
mvcons = mvall
mvcons[2] = NA
resf <- normalmixEM(xn, lambda = .25, mu = mvall, sigma = c(100,50,20),mean.constr = mvcons) }
print(proc.time() - ptm)
muchapo <- resf$mu
sigmachapo <- resf$sigma
lambdachapo <- resf$lambda
png(filename = paste0('histo_',basefn,'_fit.png'),antialias = c('subpixel'),width = 800, height = 800)
xlim = range(x)
plot(doR)
points(x[tp$peaks],y[tp$peaks],col="red")
points(x[tp$pits],y[tp$pits],col="green")
yfit=y*0
for (k in 1:length(muchapo)){
ddchapo <- function(x) lambdachapo[k] * dnorm(x,muchapo[k],sigmachapo[k])
plot(ddchapo, xlim=xlim, add=TRUE, n=1000, lty=2, col=k)
yfit = yfit + ddchapo(x)
}
dev.off()
png(filename = paste0('histo_',basefn,'_fitall.png'),antialias = c('subpixel'),width = 800, height = 800)
plot(doR)
lines(x,yfit,col=2)
dev.off()
for (k in 1:4){
fn=sprintf('P%s_mu',k)
d= data.frame(muchapo[k])
colnames(d)=fn
res = merge(res,d)
}
for (k in 1:4){
fn=sprintf('P%s_sigma',k)
d= data.frame(sigmachapo[k])
colnames(d)=fn
res = merge(res,d)
}
for (k in 1:4){
fn=sprintf('P%s_lambda',k)
d= data.frame(lambdachapo[k])
colnames(d)=fn
res = merge(res,d)
}
}
}
res$data_nb_peak
mvall
mvcons = mvall
mvcons[2] = NA
resf <- normalmixEM(xn, lambda = .25, mu = mvall, sigma = c(100,50,20),mean.constr = mvcons) }
resf <- normalmixEM(xn, lambda = .25, mu = mvall, sigma = c(100,50,20),mean.constr = mvcons)
dname='/scratch/CENIR/users/romain.valabregue/dicom/nifti_proc/PRISMA_GAP/2017_11_15_GAP_PAPME11/anat_S02_t1mpr_SAG_NSel_S176_1iso/cat12/'
suppressMessages(library(oro.nifti))
suppressMessages(library(psych))
suppressMessages(library(neuroim))
suppressMessages(library(mmand))
source(file.path(Sys.getenv("HOME"),'dvpt/R/init_path.R'))
fraw = get_files(dname,'^s_.*gz',nbf=1)
fmskull = get_files(dname,'niw_dill_skull_mask',nbf=1)
fmbrain = get_files(dname,'niw_Mean_brain_mask5k',nbf=1)
fmskulldill = get_files(dname,'niw_dill_skull_mask',nbf=1)
print(sprintf('Working on %s',dname))
img_skull <- readNIfTI(fmskull,reorient = FALSE)
dim_img = dim(img_skull)
dimx = dim_img[1]
res = data.frame(dimx)
res$dimy = dim_img[2];res$dimz = dim_img[3];
yy = array(img_skull,dim_img)
ii <- which(yy>0,arr.ind = TRUE)
res$max_z_ind_skull = max(ii[,3])
res$min_z_ind_skull = min(ii[,3])
res$max_y_ind_skull = max(ii[,2])
res$min_y_ind_skull = min(ii[,2])
res$max_x_ind_skull = max(ii[,1])
res$min_x_ind_skull = min(ii[,1])
res$nb_up_slice = res$dimz -1 - res$max_z_ind_skull
rm(img_skull)
img_brain <- readNIfTI(fmbrain,reorient = FALSE)
yy = array(img_brain,dim_img)
ii = which(yy>0,arr.ind = TRUE)
res$max_z_ind_brain = max(ii[,3])
res$min_z_ind_brain = min(ii[,3])
res$max_y_ind_brain = max(ii[,2])
res$min_y_ind_brain = min(ii[,2])
res$max_x_ind_brain = max(ii[,1])
res$min_x_ind_brain = min(ii[,1])
rm(img_brain)
if (res$nb_up_slice>-10){
img_raw = readNIfTI(fraw,reorient=FALSE)
img_skull_dill <- readNIfTI(fmskulldill,reorient = FALSE)
#sl_z_up = (res$max_z_ind_skull+1):(res$dimz-1)
sl_z_up_list = list( (res$max_z_ind_skull+1):(res$dimz-1) ,
(res$max_z_ind_skull-25):(res$max_z_ind_skull),
(res$max_z_ind_skull-50):(res$max_z_ind_skull-25),
(res$max_z_ind_skull-75):(res$max_z_ind_skull-50),
(res$max_z_ind_skull-100):(res$max_z_ind_skull-75),
(res$min_z_ind_brain:res$max_z_ind_brain))
kk=0
if (res$nb_up_slice<3) {
sl_z_up_list = sl_z_up_list[-1]
kk=kk+1}
stname = c('noise_','slab1_','slab2_','slab3_','slab4_','slabAll_')
for (sl_z_up in sl_z_up_list){
kk=kk+1
xn = img_raw[,,sl_z_up]
xn[img_skull_dill[,,sl_z_up]==1] = 0
if (kk==1) ers=TRUE else ers=FALSE
dd = get_nois_stats(xn,ers=ers)
colnames(dd) = paste0(stname[kk],colnames(dd))
res=merge(res,dd)
}
}
write.csv(t(res), file.path(dname,'volume_noise.csv') )
fname
fmask
res$data_nb_peak
res
fname
del(res)
rm(res)
fmask
img <- readNIfTI(fname,reorient = FALSE)
xn <- as.vector(img) #img_3d = drop_img_dim(img)
mimg <- readNIfTI(fmask,reorient = FALSE)
xma <- as.vector(mimg)
xn[xma<=0.5]=NaN
if (mask){
xn[xn<=1]=NaN
xn = na.omit(xn) #x[!is.na(x)]
}
doR <- density(xn, na.rm = TRUE,kernel="cosine",n=512,bw=4)
x <- unlist(doR[1])
y <- unlist(doR[2])
Vol_tot = length(xn)
res=data.frame(Vol_tot)
#res$Vol_img = length(length(img))
#res$pix_vol = abs(prod(pixdim(img)[1:3]))
#smooth before peak finding
ysw=smooth.spline(x,y,spar=0.5,keep.data = FALSE)
tp<-turnpoints(y)
#tp = findpeaks(y,bw=3)
ind_peaks = tp$pos[tp$peaks]
ind_pits = tp$pos[tp$pits]
#if (tp$firstispeak) res$first_is_peak = 1 else res$first_is_peak = 0
ymax=max(y)
xmax = x[y==ymax][1]
#attention pas bon yp=y[tp$peaks]
yp  = y[ind_peaks]
ypits = y[ind_pits]
#first max after max peak and under 0.01 *ymax
ii = x>xmax & y < (ymax*0.05)
res$x_flat_start = x[ii][1]
y_x_flat_start = y[ii][1]
res$all_nb_peak_all =  length(ind_peaks)
#V2 cor res$all_nb_peak_data =  length(yp[y[tp$peaks]<ymax & x[tp$peaks]>xmax])
res$all_nb_peak_data =  length(yp[ x[ind_peaks]<=xmax])
res$all_nb_pits_data =  length(ypits[ x[ind_pits]<=xmax])
maxi<-range(xn)[2]
h=hist(xn,breaks=maxi,plot=FALSE)
mm=max(h$counts[-1])
res$x_max_hist <- h$breaks[h$counts==mm][1]
res$x_noise_hist10 <- min(h$breaks[(h$counts<10) & (h$breaks[-1]>xmax)])
if (tp$nturns%%2==1) {
if ( length(ind_pits) > length(ind_peaks)) {
print('ARGG should not happend more pits !')
tp$pits[tail(which(tp$pits),1)] = FALSE #remove the last pits
} else {
#tp$peaks[tail(which(tp$peaks),1)] = FALSE #remove the last peaks
#make first points a pits
tp$pits[1] = TRUE
}
} else {
#for only 7 suj
if (tp$firstispeak) {
tp$pits[1] = TRUE ; tp$pits[tail(which(tp$pits),1)] = FALSE #remove the last pits
}
}
ind_peaks = tp$pos[tp$peaks]
ind_pits = tp$pos[tp$pits]
if ( length(which(tp$pits)) != length(which(tp$peaks))) print('ARGG still different length')
#diff between min and max Attention $peak ont moins de points
diffrel = (y[ind_peaks]-y[ind_pits])/max(y[ind_peaks])
#remove small diff <1% du max de density
filtre_diff = diffrel>0.015
ppits = tp$pits
ppits[ppits][1] = FALSE
ppits[length(ppits)] = TRUE
diffrel_rigth = (y[tp$pos[tp$peaks]]-y[tp$pos[ppits]])/max(y[tp$pos[tp$peaks]])
filtre_diffR = diffrel_rigth>0.015
np = length(diffrel[filtre_diff])
if (np>4){
#domage ca efface trop de point pour certain sujet que si trop de points (4 sujet only)
filtre_diff = filtre_diff & filtre_diffR
np = length(diffrel[filtre_diff])
}
# res$x_extrem2 <- min(x[tp$pos[tp$pits]][filtre_diff==FALSE],na.rm = TRUE)
# #after the max
# mmax = x[y == max(y[tp$pos[tp$peaks]],na.rm = TRUE)]
# res$xpos_max = mmax
# res$x_extrem3 <- min(x[tp$pos[tp$pits]][ filtre_diff==FALSE & x[tp$pos[tp$pits]] >mmax ],na.rm = TRUE)
#
# res$data_nb_peak_inf = length(which(x[tp$pos[tp$peaks]]<= res$xpos_max))
res$data_nb_peak <- np
res$data_nb_turn =  tp$nturns
res$data_nb_peak_all =  length(diffrel)
#png(filename = paste0('histo_',basefn,'_all.png'),antialias = c('subpixel'),
png(file = paste0('histo_',basefn,'_all.png'),    width = 800, height = 800)
plot(doR)
points(x[ind_peaks],y[ind_peaks],col="red")
points(x[ind_pits],y[ind_pits],col="green")
points(x[ind_peaks][filtre_diff],y[ind_peaks][filtre_diff],col="red",pch=4)
points(x[ind_pits][filtre_diff],y[ind_pits][filtre_diff],col="green",pch=4)
points(res$x_flat_start,y_x_flat_start,col="blue",pch=22)
points(res$x_noise_hist10,y_x_flat_start,col="green",pch=22)
dev.off()
#png(filename = paste0('histo_',basefn,'_all.png'),antialias = c('subpixel'),
png(file = paste0('histo_',basefn,'_all.png'),    width = 800, height = 800)
plot(doR)
points(x[ind_peaks],y[ind_peaks],col="red")
points(x[ind_pits],y[ind_pits],col="green")
points(x[ind_peaks][filtre_diff],y[ind_peaks][filtre_diff],col="red",pch=4)
points(x[ind_pits][filtre_diff],y[ind_pits][filtre_diff],col="green",pch=4)
points(res$x_flat_start,y_x_flat_start,col="blue",pch=22)
points(res$x_noise_hist10,y_x_flat_start,col="green",pch=22)
dev.off()
if (np>0) {
peak_higth <- diffrel[filtre_diff]
peak_pos <- x[ind_peaks][filtre_diff]
peak_den <- y[ind_peaks][filtre_diff]
pits_pos <- x[ind_pits][filtre_diff]
pits_den <- y[ind_pits][filtre_diff]
for (k in 1:np){
fn=sprintf('x_data_P%s_higth',k)
d= data.frame(peak_higth[k])
colnames(d)=fn
res = merge(res,d) #cbind est plus rapide ?
}
for (k in 1:np){
fn=sprintf('x_data_P%s_pos',k)
d= data.frame(peak_pos[k])
colnames(d)=fn
res = merge(res,d)
}
for (k in 1:np){
fn=sprintf('x_data_Min%s_pos',k)
d= data.frame(pits_pos[k])
colnames(d)=fn
res = merge(res,d)
}
for (k in 1:np){
fn=sprintf('x_data_P%s_den',k)
d= data.frame(peak_den[k])
colnames(d)=fn
res = merge(res,d)
}
for (k in 1:np){
fn=sprintf('x_data_Min%s_den',k)
d= data.frame(pits_den[k])
colnames(d)=fn
res = merge(res,d)
}
res
if (multi_fit & (res$data_nb_peak==3 | res$data_nb_peak==4) ){
require(mixtools)
if (res$data_nb_peak==4) {
mvall = c(res$x_data_P1_pos,(res$x_data_P1_pos+res$x_data_P3_pos)/2,res$x_data_P3_pos,res$x_data_P4_pos)
msigma = c(10,100,50,20)
}
if (res$data_nb_peak==3) {
mvall = c(res$x_data_P1_pos,(res$x_data_P1_pos+res$x_data_P2_pos)/2,res$x_data_P2_pos,res$x_data_P3_pos)
}
mvcons = mvall
mvcons[2] = NA
ptm <- proc.time()
resf <- normalmixEM(xn, lambda = .25, mu = mvall, sigma = msigma ,mean.constr = mvcons)
print(proc.time() - ptm)
muchapo <- resf$mu
sigmachapo <- resf$sigma
lambdachapo <- resf$lambda
#png(filename = paste0('histo_',basefn,'_fit.png'),antialias = c('subpixel'),width = 800, height = 800)
png(file = paste0('histo_',basefn,'_fit.png'),width = 800, height = 800)
xlim = range(x)
plot(doR)
points(x[ind_peaks],y[ind_peaks],col="red")
points(x[ind_pits],y[ind_pits],col="green")
points(x[ind_peaks][filtre_diff],y[ind_peaks][filtre_diff],col="red",pch=4)
points(x[ind_pits][filtre_diff],y[ind_pits][filtre_diff],col="green",pch=4)
points(res$x_flat_start,y_x_flat_start,col="blue",pch=22)
points(res$x_noise_hist10,y_x_flat_start,col="green",pch=22)
yfit=y*0
for (k in 1:length(muchapo)){
ddchapo <- function(x) lambdachapo[k] * dnorm(x,muchapo[k],sigmachapo[k])
plot(ddchapo, xlim=xlim, add=TRUE, n=1000, lty=2, col=k)
yfit = yfit + ddchapo(x)
}
dev.off()
#png(filename = paste0('histo_',basefn,'_fitall.png'),antialias = c('subpixel'),width = 800, height = 800)
png(file = paste0('histo_',basefn,'_fitall.png'),width = 800, height = 800)
plot(doR)
lines(x,yfit,col=2)
dev.off()
for (k in 1:4){
fn=sprintf('P%s_mu',k)
d= data.frame(muchapo[k])
colnames(d)=fn
res = merge(res,d)
}
for (k in 1:4){
fn=sprintf('P%s_sigma',k)
d= data.frame(sigmachapo[k])
colnames(d)=fn
res = merge(res,d)
}
for (k in 1:4){
fn=sprintf('P%s_lambda',k)
d= data.frame(lambdachapo[k])
colnames(d)=fn
res = merge(res,d)
}
}
}
res
if (res$data_nb_peak==4) {
mvall = c(res$x_data_P1_pos,(res$x_data_P1_pos+res$x_data_P3_pos)/2,res$x_data_P3_pos,res$x_data_P4_pos)
msigma = c(10,100,50,20)
}
if (res$data_nb_peak==3) {
#mvall = c(res$x_data_P1_pos,(res$x_data_P1_pos+res$x_data_P2_pos)/2,res$x_data_P2_pos,res$x_data_P3_pos)
mvall = c(res$x_data_P1_pos,res$x_data_P2_pos,res$x_data_P3_pos)
msigma = c(10,50,50)
}
mvcons = mvall
mvcons[2] = NA
ptm <- proc.time()
resf <- normalmixEM(xn, lambda = .25, mu = mvall, sigma = msigma ,mean.constr = mvcons)
print(proc.time() - ptm)
muchapo <- resf$mu
sigmachapo <- resf$sigma
lambdachapo <- resf$lambda
#png(filename = paste0('histo_',basefn,'_fit.png'),antialias = c('subpixel'),width = 800, height = 800)
png(file = paste0('histo_',basefn,'_fit.png'),width = 800, height = 800)
xlim = range(x)
plot(doR)
points(x[ind_peaks],y[ind_peaks],col="red")
points(x[ind_pits],y[ind_pits],col="green")
points(x[ind_peaks][filtre_diff],y[ind_peaks][filtre_diff],col="red",pch=4)
points(x[ind_pits][filtre_diff],y[ind_pits][filtre_diff],col="green",pch=4)
points(res$x_flat_start,y_x_flat_start,col="blue",pch=22)
points(res$x_noise_hist10,y_x_flat_start,col="green",pch=22)
yfit=y*0
for (k in 1:length(muchapo)){
ddchapo <- function(x) lambdachapo[k] * dnorm(x,muchapo[k],sigmachapo[k])
plot(ddchapo, xlim=xlim, add=TRUE, n=1000, lty=2, col=k)
yfit = yfit + ddchapo(x)
}
dev.off()
png(file = paste0('histo_',basefn,'_fitall.png'),width = 800, height = 800)
plot(doR)
lines(x,yfit,col=2)
dev.off()
rcat_seg = read.csv(file.path(resdir,'res_cat12seg_18999.csv'))
resdir='/network/lustre/iss01/cenir/analyse/irm/users/romain.valabregue/dicom/res'
rcat_seg = read.csv(file.path(resdir,'res_cat12seg_18999.csv'))
imis = is.na(rcat_seg$bgray_msT1_mean)
wher(imis)
which(imis)
length(which(imis))
